# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early.meals`
### Bonus ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function
# Write a function that adds pizza to every meal
# Add pizza to every meal!
names <- c("Jack Fox","Dylan Babbs","Andrea Chen","Iman Baghai",
"Christopher Ross","Evan Frawley")
math.grades <- c(50, 60, 70, 80, 90, 95)
spanish.grades <- c(95, 90, 80, 70, 60, 50)
# Create a data frame with the grades of the TAs in it
tas <- data.frame(names, math.grades, spanish.grades, stringsAsFactors = FALSE)
# Create a vector with names of the columns
columns <- paste(colnames(tas), collapse = ", ")
# Print the details about the TA data frame
print(paste("The TA data frame has", nrow(tas), "rows and", ncol(tas),
"cols:", columns))
View(vehicles)
# Exercise 1: Data Frame Practice
# Install devtools package: allows installations from GitHub
install.packages('devtools')
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the "fueleconomy" package
library(fueleconomy)
View(vehicles)
?dplyr
??dplyr
select(vehicles, make)
install.packages("dplyr")  # once per machine
library("dplyr")
# Install devtools package: allows installations from GitHub
install.packages('devtools')
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data.frame
# Select the different manufacturers (makes) of the cars in this data set.
select(vehicles, make)
install.packages("devtools")
select(vehicles, make)
unqique(vehicles, make)
unique(vehicles, make)
unique(select(vehicles, make))
select(vehicles, make, year == 1997)
filter(vehicles, make, year == 1997)
filter(make, year == 1997)
filter(vehicles, year == 1997)
arrange(filter(vehicles, year == 1997), hwy)
View(arrange(filter(vehicles, year == 1997), hwy))
install.packages("httr")
library("httr")
GET("https://www.facebook.com")
GET("https://ischool.uw.edu/")
ab <- GET("https://ischool.uw.edu/")
View(ab)
DELETE(ab)
DELETE("https://ischool.uw.edu/")
DELETE("https://ischool.uw.eidu/")
DELETE("https://ischool.uw.edu/ik")
GET("https://github.com/info201-w17/a1-start-with-git-guptad2")
GET("https://github.com/info201-w17/a1-start-with-git-guptad2")
GET("https://github.com/info201-w17")
ab <- GET("https://github.com/info201-w17")
content(ab)
install.packages("xml2")
ab <- GET("https://github.com/info201-w17")
content(ab)
content(ab,"text")
nstall.packages("jsonlite")
library("jsonlite")
ab <- GET("https://github.com/info201-w17")
x <- content(ab, "text")
y <- fromJSON(x)
x <- content(ab, "text")
install.packages("jsonlite")
library("jsonlite")
ab <- GET("https://github.com/info201-w17")
x <- content(ab, "text")
install.packages("jsonlite")
ab <- GET("https://github.com/info201-w17")
x <- content(ab, "text")
y <- fromJSON(x)
library("jsonlite")
ab <- GET("https://github.com/info201-w17")
x <- content(ab, "text")
y <- fromJSON(x)
ab <- GET("https://api.github.com/info201-w17")
x <- content(ab, "text")
y <- fromJSON(x)
ab <- GET("https://api.github.com/info201-w17")
x <- content(ab, "text")
y <- fromJSON(x)
library("jsonlite")
ab <- GET("https://api.github.com/info201-w17")
x <- content(ab, "text")
y <- fromJSON(x)
install.packages("httr")
library("httr")
install.packages("xml2")
install.packages("jsonlite")
library("jsonlite")
ab <- GET("https://api.github.com/info201-w17")
x <- content(ab, "text")
y <- fromJSON(x)
install.packages("jsonlite")
y <- as.data.frame(y)
View(y)
base.url <- GET("http://pokeapi.co/api/")
library(jsonlite)
library(httr)
library(dplyr)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- GET("http://pokeapi.co/api/")
library(jsonlite)
library(httr)
library(dplyr)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- GET("http://pokeapi.co/api/")
base.url <- "http://pokeapi.co/api/"
data <- GET(base.url)
response <- GET(base.url)
response <- GET(base.url)
body <- content(response, "text")
base.url <- "http://pokeapi.co/api/v2/"
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(base.url)
body <- content(response, "text")
names <- fromJSON(body)
response <- GET(base.url)
body <- content(response, "text")
pokemons <- fromJSON(body)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(base.url)
body <- content(response, "text")
pokemons <- fromJSON(body)
# it with the Poke API?
response <- GET(paste(base.url, pokemon/bulbasaur))
body <- content(response, "text")
pokemon <- fromJSON(body)
library(jsonlite)
library(httr)
library(dplyr)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(paste(base.url, pokemon/bulbasaur))
body <- content(response, "text")
pokemon <- fromJSON(body)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(paste(base.url, pokemon/bulbasaur))
body <- content(response, "text")
pokemon <- fromJSON(body)
pokemon
pokemon %>% select(name)
pokemon %>% select_(name)
response <- GET(paste(base.url, "pokemon/"))
body <- content(response, "text")
pokemon <- fromJSON(body)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(paste(base.url, "pokemon/"))
body <- content(response, "text")
pokemon <- fromJSON(body)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(paste(base.url, "pokemon/"))
body <- content(response, "text")
pokemon <- fromJSON(body)
url <- paste(base.url, "pokemon/")
url
url <- paste0(base.url, "pokemon/")
url
url <- paste0(base.url, "pokemon/bulbasaur")
url <- paste0(base.url, "pokemon/bulbasaur")
response <- GET(url)
body <- content(response, "text")
pokemon <- fromJSON(body)
pokemon <- fromJSON(body) %>%
select(name)
View
View(pokemon)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
url <- paste0(base.url, "pokemon/bulbasaur")
response <- GET(url)
body <- content(response, "text")
pokemon <- fromJSON(body)
print(pokemon)
names(response)
names(pokemon)
is.data.frame(pokemon)
pokemon$moves
is.data.frame(pokemon$moves)
poke.moves <- head(pokemon$moves)
View
View(poke.moves)
flatten(poke.moves)
poke.moves <- flatten(poke.moves)
View(poke.moves)
response
library(jsonlite)
library(httr)
library(dplyr)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
url <- paste0(base.url, "pokemon/bulbasaur")
response <- GET(url)
body <- content(response, "text")
pokemon <- fromJSON(body)
print(pokemon)
# Make a variable called pokemon url that holds your favorite pokemon's url
pokemon.url <- url
# Use the GET function to call the url, store it in a variable called response
# Use the names function to learn more response. Print it out. It will return a list of ten
# names within the response object. You can think of the list names as column names.
names(response)
# Within the printed list the most important values we are looking at is
# 'status_code'. It will tell us if our API worked with the network.
# Be sure that the code is working by checking it with this page.
# https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
# hint: remeber you can call this similar to how you would call a column!
response
install.packages("shiny")
library("shiny")
?shiny
shiny::runApp('Desktop/Info201/module15-shiny/exercise-1')
shiny::runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
?data
data("iris")
data("iris")
data("iris")
iris
View(iris)
iris <- as.data.frame("iris")
View(iris)
iris <- as.data.frame(iris)
data("iris")
iris <- as.data.frame(iris)
is.data.frame(iris)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
?renderTable
library(dplyr)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
View(iris)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
library(ggplot2)
View(iris)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
library(plotly)
return(plotly(plot))
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
?tabPanel()
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
View(iris)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
?as.string
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
req.table
filtered() <- reactive({
if(as.numeric(input$leaf.type) == 1){
req.table <- filter(iris, Species == input$Species) %>%
summarise(Minimum = min(Sepal.Length), Maximum = max(Sepal.Length), Mean = mean(Sepal.Length))
} else if(as.numeric(input$leaf.type) == 2){
req.table <- filter(iris, Species == input$Species) %>%
summarise(Minimum = min(Sepal.Width), Maximum = max(Sepal.Width), Mean = mean(Sepal.Width))
} else if(as.numeric(input$leaf.type) == 3) {
req.table <- filter(iris, Species == input$Species) %>%
summarise(Minimum = min(Petal.Length), Maximum = max(Petal.Length), Mean = mean(Petal.Length))
} else {
req.table <- filter(iris, Species == input$Species) %>%
summarise(Minimum = min(Petal.Width), Maximum = max(Petal.Width), Mean = mean(Petal.Width))
}
return(req.table)
})
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
rsconnect::setAccountInfo(name='guptad2',
token='BB399AD315020AFEC5A345AC31AD2EB2',
secret='YcwNtP0TaaL+DBMDURb0hhTql+1H2pqA5KY8bdNT')
shiny::runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
library(plotly)
library(ggplot2)
library(plotly)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
library("dplyr")
setwd("~/Desktop/Info201/finalProject")
degrees.data <- read.csv(file="data/crunchbase_2013inCSV.csv", header=TRUE,sep=",")
setwd("~/Desktop/Info201/finalProject/data/crunchbase_2013inCSV")
setwd("~/Desktop/Info201/finalProject")
degrees.data <- read.csv(file="data/crunchbase_2013inCSV.csv", header=TRUE)
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degress-1.csv", header=TRUE)
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
View(degrees.data)
summary <- group_by(degrees.data, "X..degree_type.")
View(summary)
summary <- group_by(degrees.data, "X..degree_type.") %>%
summarise(Number = n())
View(summary)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "institution")
View(degrees.data)
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
summary <- group_by(degrees.data, "degree_type.") %>%
summarise(Number = n())
View(summary)
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
summary <- group_by(degrees.data, "degree_type") %>%
summarise(Number = n())
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
summary <- group_by(degrees.data, "degree_type") %>%
summarise(Number = n())
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
summary <- group_by(degrees.data, "degree_type") %>%
summarise(Number = n())
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
summary <- group_by(degrees.data, "degree_type") %>%
summarise(Number = n())
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
summary <- group_by(degrees.data, "degree_type") %>%
summarise(Number = n())
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
summary <- group_by(degrees.data, "degree_type") %>%
summarise(Number = n())
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
View(degrees.data)
View(summary)
summary <- group_by(degrees.data, "degree_type") %>%
summarise(Number = n())
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
View(summary)
View(degrees.data)
degrees.data <- select(degrees.data, "id", "object_id", "degree_type", "subject", "institution")
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
View(degrees.data)
degrees.data <- select(degrees.data, id, object_id, degree_type, subject, institution)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
View(degrees.data)
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
View(degrees.data)
View(degrees.data)
degrees.data <- select(1,2,3,4,5)
degrees.data <- select(degrees.data,1,2,3,4,5)
View(degrees.data)
View(degrees.data)
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data,1,2,3,4,5)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
View(degrees.data)
summary <- group_by(degrees.data, "degree_type") %>%
summarise(Number = n())
View(summary)
summary <- group_by(degrees.data, degree_type) %>%
summarise(Number = n())
View(summary)
View(summary)
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution")
summary <- group_by(degrees.data, degree_type) %>%
filter(degree_type = "MS" || degree_type = "BS" || degree_type = "PhD")
summarise(Number = n())
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
View(degrees.data)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
summary <- group_by(degrees.data, degree_type) %>%
filter(degree_type = "MS" || degree_type = "BS" || degree_type = "PhD")
summarise(Number = n())
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
View(degrees.data)
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
summary <- group_by(degrees.data, degree_type) %>%
filter(degree_type = "MS" || degree_type = "BS" || degree_type = "PhD")
summarise(Number = n())
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
summary <- group_by(degrees.data, degree_type) %>%
filter(degree_type == "MS" || degree_type == "BS" || degree_type == "PhD")
summarise(Number = n())
View(summary)
summary <- filter(degrees.data, degree_type == "MS" || degree_type == "BS" || degree_type == "PhD") %>%
group_by(degree_type) %>%
summarise(Number = n())
View(summary)
summary <- filter(degrees.data, degree_type == "MS" || degree_type == "BS" || degree_type == "PhD") #%>%
View(summary)
summary <- filter(degrees.data, degree_type == "MS" || degree_type == "BS" || degree_type == "PhD")
View(degrees.data)
summary <- filter(degrees.data, degree_type == "MS" || degree_type == "BS" || degree_type == "PhD")
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
View(degrees.data)
summary <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD")
summary <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD") %>%
group_by(degree_type) %>%
summarise(Number = n())
View(summary)
if (!(degrees.data$degree_type == "MS" | degrees.data$degree_type == "BS" | degrees.data$degree_type == "PhD")) {
degrees.data$degree_type = "Other"
}
View(degrees.data)
if (degrees.data$degree_type == "MS" | degrees.data$degree_type == "BS" | degrees.data$degree_type == "PhD") {
} else {
degrees.data$degree_type = "Other"
}
View(summary)
View(degrees.data)
if (degrees.data$degree_type != "MS" & degrees.data$degree_type == "BS" & degrees.data$degree_type == "PhD") {
degrees.data$degree_type = "Other"
}
View(degrees.data)
if (degrees.data$degree_type != "MS" & degrees.data$degree_type != "BS" & degrees.data$degree_type != "PhD") {
degrees.data$degree_type = "Other"
}
View(summary)
View(degrees.data)
if (degrees.data$degree_type != "MS" & degrees.data$degree_type != "BS" & degrees.data$degree_type != "PhD") {
degrees.data$degree_type = "Other"
}
View(degrees.data)
