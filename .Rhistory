View(animal.sleep)
# Define a new `ui` variable. This variable should be assigned a `fluidPage` layout
ui <- fluidPage(
#Include a `titlepanel` of "Mammals and thier Sleep"
titlePanel("Mammals and thier Sleep"),
# Include a paragraph introducing the data
p("This is a data set focused on mammals and thier sleeping habits. It will look at REM and
sleep duration."),
# Select a panel. In that panel have `selectInput` that will allow someone
# to go through the diffrent types of of choices such as `vore`, `order`, `conservation`
# Add another way to interact with the data
# Add a `submitButton` so all changes occur together
# What are benefits of using the submit button vs not?
inputPanel(
selectInput('facet.by', label="Type of Vore", choices=c('order', 'vore','conservation')),
submitButton(text = "Apply Changes", icon = NULL, width = NULL)
),
# Create a main panel where the `plot` will go
mainPanel(
plotOutput('plot'),
verbatimTextOutput("text")
),
# include a concluding paragraph about the data after making the plot. What are
# some trends in the data you notice? Be aware that you filtered the data set!
p("Herbivores get the least sleep and the least amount of REM sleep. This could be due to
the constant need to be vigilant. However my data is filtered, so more complete data points
would be needed to draw a stronger conclusion.")
)
# Define a server function for the app
server <- function(input, output) {
# assign a `renderPlot` to `output$plot`
output$plot <- renderPlot({
# The filtered data set should then be used in a ggplot2 scatter plot with the
# sleep_total on the x-axis, the sleep_rem on the y-axis, and color based on the vore
# You should specify facets based on what feature the user selected to "facet by"
#   (hint: you can just pass that string to the `facet_wrap()` function!)
p <- ggplot(data = animal.sleep, mapping = aes(x = sleep_total, y = sleep_rem, color = vore)) +
geom_point() + facet_wrap(input$facet.by)
return(p)
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
View(diamonds)
# Load the shiny, ggplot2, and dplyr libraries
library(shiny)
library(ggplot2)
library(dplyr)
# You will once again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 3000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 3000)
# For convenience store the `range()` of values for the `price` and `carat` values
# for the ENTIRE diamonds dataset.
price.range <- range(diamonds$price)
carat.range <- range(diamonds$carat)
# Define a UI using a fluidPage layout
ui <- fluidPage(
# Include a `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('price.choice', label="Price (in dollars)", min=price.range[1], max=price.range[2], value=price.range),
# A sliderInput labeled "Carats". This slider should let the user pick a range
# between the minimum and maximum carats of the entire diamond data set
sliderInput('carat.choice', label="Carats", min=carat.range[1], max=carat.range[2], value=carat.range),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('smooth', label=strong("Show Trendline"), value=TRUE),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput('facet.by', label="Facet By", choices=c('cut', 'clarity', 'color'))
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing a plot based on the user specifications
plotOutput('plot'),
# Bonus: a dataTableOutput showing a data table of relevant observations
dataTableOutput('table')
)
)
)
# Define a Server function for the app
server <- function(input, output) {
# reactive variable for shared data
filtered <- reactive({
data <- diamonds.sample %>%
filter(price > input$price.choice[1] & price < input$price.choice[2]) %>%
filter(carat > input$carat.choice[1] & carat < input$carat.choice[2])
return(data)
})
# Assign a reactive `renderPlot()` function to the outputted `plot`
output$plot <- renderPlot({
# This function should take the `diamonds.sample` data set and filter it by the
# input price and carat ranges.
# Hint: use dplyr and multiple `filter()` operations
# The filtered data set should then be used in a ggplot2 scatter plot with the
# carat on the x-axis, the price on the y-axis, and color based on the clarity
# You should specify facets based on what feature the user selected to "facet by"
#   (hint: you can just pass that string to the `facet_wrap()` function!)
p <- ggplot(data = filtered(), mapping = aes(x = carat, y = price, color=cut)) +
geom_point() +
facet_wrap(input$facet.by)
# Finally, if the "trendline" checkbox is selected, you should also include a
# geom_smooth geometry (with `se=FALSE`)
# Hint: you'll need to use an `if` statement, and save the `ggplot` as a variable
#      that you can then add the geom to.
# Be sure and return the completed plot!
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the data twice!
output$table <- renderDataTable({
return(filtered())
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('Desktop/info201/Classwork/module15-shiny/exercise-4')
runApp('Desktop/info201/Classwork/module15-shiny/exercise-4')
runApp('Desktop/info201/Classwork/module15-shiny/exercise-2')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
#loads the necessary libraries
library("shiny")
#variables for the column names that the user can select as either the dependent or independent variable
variables <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")
#Defines a UI using a fluidPage layout
ui <- fluidPage(
titlePanel("Iris Data"),
#allows for multi-column layout with navigation
sidebarLayout(
sidebarLayout(
#allows the user to pick on of the 4 variables (as declared above) as the x variable
radioButtons('x', label = strong("X Variable"), choices = variables),
#allows the user to pick on of the 4 variables (as declared above) as the y variable
radioButtons('y', label = strong("Y Variable"), choices = variables),
#allows the user to decide whether or not to show a trendline
checkboxInput('smooth', label = strong("Show Trendline"), value=TRUE),
#allows the user to decide which species of flower to look at
selectInput('species', label = strong("Species"), choices = c("setosa", "versicolor", "virginica"))
),
mainPanel(
#allows the user to select different presentations of the data
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot")),
tabPanel("Table", tableOutput("table"))
)
)
)
)
# creates the UI out of the `ui` value
shinyUI(ui)
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
View(filtered.data)
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
ggplot(data = filtered()) +
geom_point(mapping = aes(x = x, y = y, color = "blue"))
ggplot(data = filtered.data) +
geom_point(mapping = aes(x = x, y = y, color = "blue"))
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
ggplot(data = filtered.data) +
geom_point(mapping = aes(x = x, y = y, color = "blue"))
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
ggplot(data = filtered.data) +
geom_point(mapping = aes(x = as.numeric(x), y = as.numeric(y), color = "blue"))
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
ggplot(data = filtered.data) +
geom_point(mapping = aes(x = 1, y = 2, color = "blue"))
View(filtered.data)
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
ggplot(data = filtered.data) +
geom_point(mapping = aes(x = [[1]], y = [[2]], color = "blue"))
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
ggplot(data = filtered.data) +
geom_point(mapping = aes(x = filtered.data[,1], y = filtered.data[,2], color = "blue"))
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
ggplot(data = filtered.data) +
geom_point(mapping = aes(x = filtered.data[,1], y = filtered.data[,2]), color = "blue")
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
ggplot(data = filtered.data) +
geom_point(mapping = aes(x = select_(filtered.data, x), y = select_(filtered.data, y), color = "blue"))
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
ggplot(data = filtered.data) +
geom_point(mapping = aes(x = select_(filtered.data, x), y = select_(filtered.data, y)), color = "blue")
library(ggplot2)
data("iris")
x <- "Sepal.Length"
y <- "Sepal.Width"
filtered.data <- iris %>% filter(Species == "setosa") %>%
select_(x, y)
ggplot(data = filtered.data) +
geom_point(mapping = aes(x = select_(filtered.data, x), y = select_(filtered.data, y)), color = "blue") +
xlab(x) + ylab(y)
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
runApp('Desktop/info201/Homework/a8-data-app-rpachauri')
library("plotly")
library("ggplot2")
library("dplyr")
library("knitr")
library("maps")
library("stringr")
library("ggvis")
library("tidyr")
world <- map_data("world") %>% mutate(ISO3 = iso.alpha(region, 3))
world.GDP.cap.change <- left_join(world, GDP.per.capita.percent.change, by = "ISO3") %>%
select(long, lat, group, order, region, X2010, X2030, X2050, X2070, X2090)
library("plotly")
library("ggplot2")
library("dplyr")
library("knitr")
library("maps")
library("stringr")
library("ggvis")
library("tidyr")
country.indicators <- read.csv("data/CountryIndicators\ -\ Definition and Source.csv", stringsAsFactors = FALSE)
GDP.cap.climate.change <- read.csv("data/GDPcap_ClimateChange_RCP85_SSP5.csv", stringsAsFactors = FALSE)
GDP.cap.no.climate.change <- read.csv("data/GDPcap_NOClimateChange_RCP85_SSP5.csv", stringsAsFactors = FALSE)
world.bank <- read.csv("data/WorldBank_CountryIndicators.csv", stringsAsFactors = FALSE)
GDP.per.capita.percent.change <- inner_join(GDP.cap.climate.change, GDP.cap.no.climate.change, by = c("name", "ISO3", "ISO2", "meantemp")) %>%
mutate(X2010 = (X2010.x - X2010.y)*100/X2010.y,
X2020 = (X2020.x - X2020.y)*100/X2020.y,
X2030 = (X2030.x - X2030.y)*100/X2030.y,
X2040 = (X2040.x - X2040.y)*100/X2040.y,
X2050 = (X2050.x - X2050.y)*100/X2050.y,
X2060 = (X2060.x - X2060.y)*100/X2060.y,
X2070 = (X2070.x - X2070.y)*100/X2070.y,
X2080 = (X2080.x - X2080.y)*100/X2080.y,
X2090 = (X2090.x - X2090.y)*100/X2090.y) %>%
select(name, ISO3, ISO2, meantemp, X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
countries <- c("United States", "China", "Russian Federation", "Germany", "Iceland", "India", "Canada")
interested.countries <- GDP.per.capita.percent.change %>%
filter(name %in% countries)
interested.countries <-
gather(interested.countries,
key = year,
value = GDP.capita.change, X2010, X2020, X2030, X2040, X2050, X2060, X2070, X2080, X2090)
interested.countries$year <- str_replace(interested.countries$year, 'X', '')
code = 'SI.POV.NAHC'
world.bank.country.poverty <- world.bank %>%
filter(Series.Code == code & value != 'NA') %>%
select(Country.Name, Country.Code, Poverty = value)
#gets the change in GDP per capita percent for 2090
#this would likely be the largest change because climate change would have had the most effect
GDP.capita.percent.change.2090 <- GDP.per.capita.percent.change %>% select(name, ISO3, X2090)
poverty.vs.GDPchange <- inner_join(world.bank.country.poverty, GDP.capita.percent.change.2090, by = c("Country.Code" = "ISO3")) %>%
select(Country.Name, Country.Code, Poverty, X2090) %>% filter(X2090 <= 100) %>% arrange(X2090)
world.GDP.cap.change <- left_join(world, GDP.per.capita.percent.change, by = "ISO3") %>%
select(long, lat, group, order, region, X2010, X2030, X2050, X2070, X2090)
world.GDP.cap.change <-
gather(world.GDP.cap.change,
key = year,
value = GDP.cap.change, X2010, X2030, X2050, X2070, X2090)
world.GDP.cap.change$year <- str_replace(world.GDP.cap.change$y
View(world.GDP.cap.change)
world.GDP.cap.change$year <- str_replace(world.GDP.cap.change$year, 'X', '')
shit <- read.csv("cb_acquisitions.csv", quote = "'")
library("dplyr")
cb_ipos <- read.csv("cb_ipos.csv", quote = "", stringsAsFactors = FALSE)
cb_funding.rounds <- read.csv("cb_funding_rounds.csv", quote = "", stringsAsFactors = FALSE)
cb_relationships <- read.csv("cb_relationships.csv", quote = "", stringsAsFactors = FALSE)
funding.rounds.c <- filter(cb_funding.rounds, X.funding_round_type. == "'series-c+'") %>%
select(3)
funding.rounds.b <- filter(cb_funding.rounds, X.funding_round_type. == "'series-b'") %>%
select(3)
funding.rounds.a <- filter(cb_funding.rounds, X.funding_round_type. == "'series-a'") %>%
select(3)
c.funding.with.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
funding.rounds.c <- funding.rounds.c[c.funding.with.ipo,]
setwd("~/Desktop/finalProject")
library("dplyr")
cb_ipos <- read.csv("cb_ipos.csv", quote = "", stringsAsFactors = FALSE)
cb_funding.rounds <- read.csv("cb_funding_rounds.csv", quote = "", stringsAsFactors = FALSE)
cb_relationships <- read.csv("cb_relationships.csv", quote = "", stringsAsFactors = FALSE)
funding.rounds.c <- filter(cb_funding.rounds, X.funding_round_type. == "'series-c+'") %>%
select(3)
funding.rounds.b <- filter(cb_funding.rounds, X.funding_round_type. == "'series-b'") %>%
select(3)
funding.rounds.a <- filter(cb_funding.rounds, X.funding_round_type. == "'series-a'") %>%
select(3)
c.funding.with.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
funding.rounds.c <- funding.rounds.c[c.funding.with.ipo,]
library("dplyr")
data.folder <- "data/crunchbase_2013inCSV"
cb_ipos <- read.csv(paste0(data.folder, "cb_ipos.csv"), quote = "", stringsAsFactors = FALSE)
cb_funding.rounds <- read.csv(paste0(data.folder, "cb_funding_rounds.csv"), quote = "", stringsAsFactors = FALSE)
cb_relationships <- read.csv(paste0(data.folder, "cb_relationships.csv"), quote = "", stringsAsFactors = FALSE)
funding.rounds.c <- filter(cb_funding.rounds, X.funding_round_type. == "'series-c+'") %>%
select(3)
funding.rounds.b <- filter(cb_funding.rounds, X.funding_round_type. == "'series-b'") %>%
select(3)
funding.rounds.a <- filter(cb_funding.rounds, X.funding_round_type. == "'series-a'") %>%
select(3)
c.funding.with.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
funding.rounds.c <- funding.rounds.c[c.funding.with.ipo,]
funding.rounds.c <- filter(cb_funding.rounds, X.funding_round_type. == "'series-c+'") %>%
select(3)
data.folder <- "data/crunchbase_2013inCSV"
cb_ipos <- read.csv(paste0(data.folder, "cb_ipos.csv"), quote = "", stringsAsFactors = FALSE)
data.folder <- "data/crunchbase_2013inCSV/"
cb_ipos <- read.csv(paste0(data.folder, "cb_ipos.csv"), quote = "", stringsAsFactors = FALSE)
library("dplyr")
data.folder <- "data/crunchbase_2013inCSV/"
cb_ipos <- read.csv(paste0(data.folder, "cb_ipos.csv"), quote = "", stringsAsFactors = FALSE)
cb_funding.rounds <- read.csv(paste0(data.folder, "cb_funding_rounds.csv"), quote = "", stringsAsFactors = FALSE)
cb_relationships <- read.csv(paste0(data.folder, "cb_relationships.csv"), quote = "", stringsAsFactors = FALSE)
funding.rounds.c <- filter(cb_funding.rounds, X.funding_round_type. == "'series-c+'") %>%
select(3)
funding.rounds.b <- filter(cb_funding.rounds, X.funding_round_type. == "'series-b'") %>%
select(3)
funding.rounds.a <- filter(cb_funding.rounds, X.funding_round_type. == "'series-a'") %>%
select(3)
c.funding.with.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
funding.rounds.c <- funding.rounds.c[c.funding.with.ipo,]
funding.rounds.c <- filter(cb_funding.rounds, X.funding_round_type. == "'series-c+'") %>%
select(3)
funding.rounds.b <- filter(cb_funding.rounds, X.funding_round_type. == "'series-b'") %>%
select(3)
funding.rounds.a <- filter(cb_funding.rounds, X.funding_round_type. == "'series-a'") %>%
select(3)
c.funding.without.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
b.funding.without.ipo.or.c <- !funding.rounds.b$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.b$X.object_id. %in% funding.rounds.c$X.object_id.
c.funding.without.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
b.funding.without.ipo.or.c <- !funding.rounds.b$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.b$X.object_id. %in% funding.rounds.c$X.object_id.
a.funding.without.ipo.or.c.or.b <- !funding.rounds.a$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.c$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.b$X.object_id.
funding.rounds.c <- funding.rounds.c[c.funding.with.ipo,]
funding.rounds.b <- funding.rounds.b[b.funding.with.ipo,]
funding.rounds.a <- funding.rounds.a[a.funding.with.ipo,]
b.funding.without.ipo.or.c <- !funding.rounds.b$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.b$X.object_id. %in% funding.rounds.c$X.object_id.
a.funding.without.ipo.or.c.or.b <- !funding.rounds.a$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.c$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.b$X.object_id.
funding.rounds.c <- funding.rounds.c[c.funding.with.ipo,]
funding.rounds.b <- funding.rounds.b[b.funding.without.ipo.or.c,]
funding.rounds.a <- funding.rounds.a[a.funding.without.ipo.or.c.or.b,]
c.funding.without.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
library("dplyr")
data.folder <- "crunchbase_2013inCSV/"
cb_ipos <- read.csv(paste0(data.folder, "cb_ipos.csv"), quote = "", stringsAsFactors = FALSE)
cb_funding.rounds <- read.csv(paste0(data.folder, "cb_funding_rounds.csv"), quote = "", stringsAsFactors = FALSE)
cb_relationships <- read.csv(paste0(data.folder, "cb_relationships.csv"), quote = "", stringsAsFactors = FALSE)
funding.rounds.c <- filter(cb_funding.rounds, X.funding_round_type. == "'series-c+'") %>%
select(3)
funding.rounds.b <- filter(cb_funding.rounds, X.funding_round_type. == "'series-b'") %>%
select(3)
funding.rounds.a <- filter(cb_funding.rounds, X.funding_round_type. == "'series-a'") %>%
select(3)
c.funding.without.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
b.funding.without.ipo.or.c <- !funding.rounds.b$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.b$X.object_id. %in% funding.rounds.c$X.object_id.
a.funding.without.ipo.or.c.or.b <- !funding.rounds.a$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.c$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.b$X.object_id.
funding.rounds.c <- funding.rounds.c[c.funding.with.ipo,]
funding.rounds.b <- funding.rounds.b[b.funding.without.ipo.or.c,]
funding.rounds.a <- funding.rounds.a[a.funding.without.ipo.or.c.or.b,]
funding.rounds.c <- data.frame(funding.rounds.c[c.funding.with.ipo,])
remove(c.funding.with.ipo)
remove(c.funding.with.ipo, b.funding.without.ipo.or.c)
remove(c.funding.with.ipo, b.funding.without.ipo.or.c, a.funding.without.ipo.or.c.or.b)
remove(c.funding.without.ipo, b.funding.without.ipo.or.c, a.funding.without.ipo.or.c.or.b)
library("dplyr")
data.folder <- "crunchbase_2013inCSV/"
cb_ipos <- read.csv(paste0(data.folder, "cb_ipos.csv"), quote = "", stringsAsFactors = FALSE)
cb_funding.rounds <- read.csv(paste0(data.folder, "cb_funding_rounds.csv"), quote = "", stringsAsFactors = FALSE)
cb_relationships <- read.csv(paste0(data.folder, "cb_relationships.csv"), quote = "", stringsAsFactors = FALSE)
funding.rounds.c <- filter(cb_funding.rounds, X.funding_round_type. == "'series-c+'") %>%
select(3)
funding.rounds.b <- filter(cb_funding.rounds, X.funding_round_type. == "'series-b'") %>%
select(3)
funding.rounds.a <- filter(cb_funding.rounds, X.funding_round_type. == "'series-a'") %>%
select(3)
c.funding.without.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
b.funding.without.ipo.or.c <- !funding.rounds.b$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.b$X.object_id. %in% funding.rounds.c$X.object_id.
a.funding.without.ipo.or.c.or.b <- !funding.rounds.a$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.c$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.b$X.object_id.
#character vectors that contain ids of companies under certain funding rounds
# they are exclusive, meaning that:
# companies that are in funding.rounds.a will not appear in funding.rounds.c or
#   funding.rounds.b because it is assumed that companies that made thier series c funding
#   would have gotten their series a funding anyway
funding.rounds.c <- funding.rounds.c[c.funding.with.ipo,]
funding.rounds.b <- funding.rounds.b[b.funding.without.ipo.or.c,]
funding.rounds.a <- funding.rounds.a[a.funding.without.ipo.or.c.or.b,]
#remove unnecessary variables
remove(c.funding.without.ipo, b.funding.without.ipo.or.c, a.funding.without.ipo.or.c.or.b)
library("dplyr")
data.folder <- "crunchbase_2013inCSV/"
cb_ipos <- read.csv(paste0(data.folder, "cb_ipos.csv"), quote = "", stringsAsFactors = FALSE)
cb_funding.rounds <- read.csv(paste0(data.folder, "cb_funding_rounds.csv"), quote = "", stringsAsFactors = FALSE)
cb_relationships <- read.csv(paste0(data.folder, "cb_relationships.csv"), quote = "", stringsAsFactors = FALSE)
funding.rounds.c <- filter(cb_funding.rounds, X.funding_round_type. == "'series-c+'") %>%
select(3)
funding.rounds.b <- filter(cb_funding.rounds, X.funding_round_type. == "'series-b'") %>%
select(3)
funding.rounds.a <- filter(cb_funding.rounds, X.funding_round_type. == "'series-a'") %>%
select(3)
c.funding.without.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
b.funding.without.ipo.or.c <- !funding.rounds.b$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.b$X.object_id. %in% funding.rounds.c$X.object_id.
a.funding.without.ipo.or.c.or.b <- !funding.rounds.a$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.c$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.b$X.object_id.
#character vectors that contain ids of companies under certain funding rounds
# they are exclusive, meaning that:
# companies that are in funding.rounds.a will not appear in funding.rounds.c or
#   funding.rounds.b because it is assumed that companies that made thier series c funding
#   would have gotten their series a funding anyway
funding.rounds.c <- funding.rounds.c[c.funding.without.ipo,]
funding.rounds.b <- funding.rounds.b[b.funding.without.ipo.or.c,]
funding.rounds.a <- funding.rounds.a[a.funding.without.ipo.or.c.or.b,]
#remove unnecessary variables
remove(c.funding.without.ipo, b.funding.without.ipo.or.c, a.funding.without.ipo.or.c.or.b)
library("dplyr")
data.folder <- "crunchbase_2013inCSV/"
cb_ipos <- read.csv(paste0(data.folder, "cb_ipos.csv"), quote = "", stringsAsFactors = FALSE)
cb_funding.rounds <- read.csv(paste0(data.folder, "cb_funding_rounds.csv"), quote = "", stringsAsFactors = FALSE)
cb_relationships <- read.csv(paste0(data.folder, "cb_relationships.csv"), quote = "", stringsAsFactors = FALSE)
funding.rounds.c <- filter(cb_funding.rounds, X.funding_round_type. == "'series-c+'") %>%
select(3)
funding.rounds.b <- filter(cb_funding.rounds, X.funding_round_type. == "'series-b'") %>%
select(3)
funding.rounds.a <- filter(cb_funding.rounds, X.funding_round_type. == "'series-a'") %>%
select(3)
c.funding.without.ipo <- !funding.rounds.c$X.object_id. %in% cb_ipos$X.object_id.
b.funding.without.ipo.or.c <- !funding.rounds.b$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.b$X.object_id. %in% funding.rounds.c$X.object_id.
a.funding.without.ipo.or.c.or.b <- !funding.rounds.a$X.object_id. %in% cb_ipos$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.c$X.object_id. &
!funding.rounds.a$X.object_id. %in% funding.rounds.b$X.object_id.
#character vectors that contain ids of companies under certain funding rounds
# they are exclusive, meaning that:
# companies that are in funding.rounds.a will not appear in funding.rounds.c or
#   funding.rounds.b because it is assumed that companies that made thier series c funding
#   would have gotten their series a funding anyway
funding.rounds.c <- funding.rounds.c[c.funding.without.ipo,]
funding.rounds.b <- funding.rounds.b[b.funding.without.ipo.or.c,]
funding.rounds.a <- funding.rounds.a[a.funding.without.ipo.or.c.or.b,]
#remove no longer necessary variables
remove(c.funding.without.ipo, b.funding.without.ipo.or.c, a.funding.without.ipo.or.c.or.b)
