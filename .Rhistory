install.packages("jsonlite")
y <- as.data.frame(y)
View(y)
base.url <- GET("http://pokeapi.co/api/")
library(jsonlite)
library(httr)
library(dplyr)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- GET("http://pokeapi.co/api/")
library(jsonlite)
library(httr)
library(dplyr)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- GET("http://pokeapi.co/api/")
base.url <- "http://pokeapi.co/api/"
data <- GET(base.url)
response <- GET(base.url)
response <- GET(base.url)
body <- content(response, "text")
base.url <- "http://pokeapi.co/api/v2/"
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(base.url)
body <- content(response, "text")
names <- fromJSON(body)
response <- GET(base.url)
body <- content(response, "text")
pokemons <- fromJSON(body)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(base.url)
body <- content(response, "text")
pokemons <- fromJSON(body)
# it with the Poke API?
response <- GET(paste(base.url, pokemon/bulbasaur))
body <- content(response, "text")
pokemon <- fromJSON(body)
library(jsonlite)
library(httr)
library(dplyr)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(paste(base.url, pokemon/bulbasaur))
body <- content(response, "text")
pokemon <- fromJSON(body)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(paste(base.url, pokemon/bulbasaur))
body <- content(response, "text")
pokemon <- fromJSON(body)
pokemon
pokemon %>% select(name)
pokemon %>% select_(name)
response <- GET(paste(base.url, "pokemon/"))
body <- content(response, "text")
pokemon <- fromJSON(body)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(paste(base.url, "pokemon/"))
body <- content(response, "text")
pokemon <- fromJSON(body)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
response <- GET(paste(base.url, "pokemon/"))
body <- content(response, "text")
pokemon <- fromJSON(body)
url <- paste(base.url, "pokemon/")
url
url <- paste0(base.url, "pokemon/")
url
url <- paste0(base.url, "pokemon/bulbasaur")
url <- paste0(base.url, "pokemon/bulbasaur")
response <- GET(url)
body <- content(response, "text")
pokemon <- fromJSON(body)
pokemon <- fromJSON(body) %>%
select(name)
View
View(pokemon)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
url <- paste0(base.url, "pokemon/bulbasaur")
response <- GET(url)
body <- content(response, "text")
pokemon <- fromJSON(body)
print(pokemon)
names(response)
names(pokemon)
is.data.frame(pokemon)
pokemon$moves
is.data.frame(pokemon$moves)
poke.moves <- head(pokemon$moves)
View
View(poke.moves)
flatten(poke.moves)
poke.moves <- flatten(poke.moves)
View(poke.moves)
response
library(jsonlite)
library(httr)
library(dplyr)
# Make a variable base.url that has the same base url from the poke api documentation.
# (Hint: visit http://pokeapi.co/ to find the base url)
base.url <- "http://pokeapi.co/api/v2/"
# Make a variable called movie that has the names of your favorite pokemon
# be aware of casing!
# There are multiple ways to call the pokemon. What are the 2 ways you can call
# it with the Poke API?
url <- paste0(base.url, "pokemon/bulbasaur")
response <- GET(url)
body <- content(response, "text")
pokemon <- fromJSON(body)
print(pokemon)
# Make a variable called pokemon url that holds your favorite pokemon's url
pokemon.url <- url
# Use the GET function to call the url, store it in a variable called response
# Use the names function to learn more response. Print it out. It will return a list of ten
# names within the response object. You can think of the list names as column names.
names(response)
# Within the printed list the most important values we are looking at is
# 'status_code'. It will tell us if our API worked with the network.
# Be sure that the code is working by checking it with this page.
# https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
# hint: remeber you can call this similar to how you would call a column!
response
install.packages("shiny")
library("shiny")
?shiny
shiny::runApp('Desktop/Info201/module15-shiny/exercise-1')
shiny::runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
?data
data("iris")
data("iris")
data("iris")
iris
View(iris)
iris <- as.data.frame("iris")
View(iris)
iris <- as.data.frame(iris)
data("iris")
iris <- as.data.frame(iris)
is.data.frame(iris)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
?renderTable
library(dplyr)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
View(iris)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
library(ggplot2)
View(iris)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
library(plotly)
return(plotly(plot))
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
?tabPanel()
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
View(iris)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
?as.string
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
req.table
filtered() <- reactive({
if(as.numeric(input$leaf.type) == 1){
req.table <- filter(iris, Species == input$Species) %>%
summarise(Minimum = min(Sepal.Length), Maximum = max(Sepal.Length), Mean = mean(Sepal.Length))
} else if(as.numeric(input$leaf.type) == 2){
req.table <- filter(iris, Species == input$Species) %>%
summarise(Minimum = min(Sepal.Width), Maximum = max(Sepal.Width), Mean = mean(Sepal.Width))
} else if(as.numeric(input$leaf.type) == 3) {
req.table <- filter(iris, Species == input$Species) %>%
summarise(Minimum = min(Petal.Length), Maximum = max(Petal.Length), Mean = mean(Petal.Length))
} else {
req.table <- filter(iris, Species == input$Species) %>%
summarise(Minimum = min(Petal.Width), Maximum = max(Petal.Width), Mean = mean(Petal.Width))
}
return(req.table)
})
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
rsconnect::setAccountInfo(name='guptad2',
token='BB399AD315020AFEC5A345AC31AD2EB2',
secret='YcwNtP0TaaL+DBMDURb0hhTql+1H2pqA5KY8bdNT')
shiny::runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
library(plotly)
library(ggplot2)
library(plotly)
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
runApp('Desktop/Info201/a8-data-app-guptad2/Assignment')
x <- rownames(degrees.data)
setwd("~/Desktop/Info201/finalProject")
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
x <- rownames(degrees.data)
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
x <- rownames(degrees.data)
i <- rownames(degrees.data)
for (val in i) {
if (degrees.data$degree_type[i] != "MS" & degrees.data$degree_type[i] != "BS" & degrees.data$degree_type[i] != "PhD") {
degrees.data$degree_type[i] = "Other"
}
}
degrees.data$degree_type[2]
View(degrees.data$degree_type[2])
View(degrees.data[3,2])
View(degrees.data[[3,2]])
summary <- filter(degrees.data, (degrees.data$degree_type == "MS" |
degrees.data$degree_type == "BS" |
degrees.data$degree_type == "PhD" |
degrees.data$degree_type == "MBA" |
))>%
group_by(degree_type) %>%
summarise(Number = n())
summary <- filter(degrees.data, (degrees.data$degree_type == "MS" |
degrees.data$degree_type == "BS" |
degrees.data$degree_type == "PhD" |
degrees.data$degree_type == "MBA" |
))%>%
group_by(degree_type) %>%
summarise(Number = n())
summary <- filter(degrees.data, (degrees.data$degree_type == "MS" |
degrees.data$degree_type == "BS" |
degrees.data$degree_type == "PhD" |
degrees.data$degree_type == "MBA" |
)) %>%
group_by(degree_type) %>%
summarise(Number = n())
library("dplyr")
summary <- filter(degrees.data, (degrees.data$degree_type == "MS" |
degrees.data$degree_type == "BS" |
degrees.data$degree_type == "PhD" |
degrees.data$degree_type == "MBA" |
)) %>%
group_by(degree_type) %>%
summarise(Number = n())
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
if  {
degrees.data$degree_type = "Other"
}
summary <- filter(degrees.data, (degrees.data$degree_type == "MS" |
degrees.data$degree_type == "BS" |
degrees.data$degree_type == "PhD" |
degrees.data$degree_type == "MBA" |
)) %>%
group_by(degree_type) %>%
summarise(Number = n())
summary <- filter(degrees.data, degrees.data$degree_type == "MS" |
degrees.data$degree_type == "BS" |
degrees.data$degree_type == "PhD" |
degrees.data$degree_type == "MBA" |
) %>%
group_by(degree_type) %>%
summarise(Number = n())
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
View(degrees.data)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
View(degrees.data)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
View(degrees.data)
summary <- filter(degrees.data, degrees.data$degree_type == "MS" |
degrees.data$degree_type == "BS" |
degrees.data$degree_type == "PhD" |
degrees.data$degree_type == "MBA" |
) %>%
group_by(degree_type) %>%
summarise(Number = n())
summary <- filter(degrees.data, degree_type == "MS" |
degree_type == "BS" |
degree_type == "PhD" |
degree_type == "MBA" |
) %>%
group_by(degree_type) %>%
summarise(Number = n())
View(degrees.data)
summary <- filter(degrees.data, degree_type == "MS" |
degree_type == "BS" |
degree_type == "PhD" |
degree_type == "MBA" |
)
summary <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" |
degree_type == "PhD" |
degree_type == "MBA"
)
View(summary)
summary <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" |
degree_type == "PhD" |
degree_type == "MBA"
) %>%
group_by(degree_type) %>%
summarise(Number = n())
View(summary)
summary <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD" | degree_type == "MBA") %>%
group_by(degree_type) %>%
summarise(Number = n())
library(ggplot2)
library("dplyr")
library("ggplot2")
agr.vs.GDP <- ggplot(data = summary) +
geom_bar(mapping = aes(x = `degree_type`))
graph <- ggplot(data = summary) +
geom_bar(mapping = aes(x = `degree_type`))
ggplot(graph)
ggplot(data = summary) +
geom_bar(mapping = aes(x = `degree_type`))
ggplot(data = summary) +
geom_point(mapping = aes(x = `degree_type`, y = `Number`))
p <- plot_ly(
x = summary$degree_type,
y = summary$Number,
name = "SF Zoo",
type = "bar"
)
library(plotly)
library("plotly")
p <- plot_ly(
x = summary$degree_type,
y = summary$Number,
name = "SF Zoo",
type = "bar"
)
plot_ly(p)
plot_ly(
x = summary$degree_type,
y = summary$Number,
name = "SF Zoo",
type = "bar"
)
plot_ly(
x = summary$degree_type,
y = summary$Number,
name = "SF Zoo",
type = "bar"
)
library("dplyr")
library("ggplot2")
library("plotly")
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
summary <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD" | degree_type == "MBA") %>%
group_by(degree_type) %>%
summarise(Number = n())
plot_ly(
x = summary$degree_type,
y = summary$Number,
name = "SF Zoo",
type = "bar"
)
summary <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD" | degree_type == "MBA")
View(summary)
p <- ggplot(data = summary) +
geom_bar(mapping = aes(x = `degree_type`))
plot_ly(p)
ggplot(data = summary) +
geom_bar(mapping = aes(x = `degree_type`))
degrees.data <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD" | degree_type == "MBA")
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
degrees.data <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD" | degree_type == "MBA")
ggplot(data = summary) +
geom_bar(mapping = aes(x = `degree_type`))
ggplot(data = degrees.data) +
geom_bar(mapping = aes(x = `degree_type`))
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
degrees.data <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD" | degree_type == "MBA")
ggplot(data = degrees.data) +
geom_bar(mapping = aes(x = `degree_type`))
summary <- group_by(degrees.data, degree_type) %>%
summarise(Number = n())
p <- ggplot(data = degrees.data) +
geom_bar(mapping = aes(x = `degree_type`))
p
p
data.dropout <- filter(degrees.data, graduated_at == "NULL") %>%
summarise(Number = n())
View(data.dropout)
number.of.dropouts <- data.dropout[1,1]
data.total <- summarise(degrees.data, Number = n())
number.total <- data.total[1,1]
percent.dropout <- number.of.dropouts / number.total * 100
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("ggplot2")
library("plotly")
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
degrees.data <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD" | degree_type == "MBA")
summary <- group_by(degrees.data, degree_type) %>%
summarise(Number = n())
p <- ggplot(data = degrees.data) +
geom_bar(mapping = aes(x = `degree_type`))
data.dropout <- filter(degrees.data, graduated_at == "NULL") %>%
summarise(Number = n())
number.of.dropouts <- data.dropout[1,1]
data.total <- summarise(degrees.data, Number = n())
number.total <- data.total[1,1]
percent.dropout <- number.of.dropouts / number.total * 100
source('~/Desktop/degrees.R')
source("startups.R")
library("dplyr")
library("ggplot2")
library("plotly")
source("startups.R")
degrees.data <- read.csv(file="data/crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
degrees.data <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD" | degree_type == "MBA")
summary <- group_by(degrees.data, degree_type) %>%
summarise(Number = n())
p <- ggplot(data = degrees.data) +
geom_bar(mapping = aes(x = `degree_type`))
data.dropout <- filter(degrees.data, graduated_at == "NULL") %>%
summarise(Number = n())
number.of.dropouts <- data.dropout[1,1]
data.total <- summarise(degrees.data, Number = n())
number.total <- data.total[1,1]
percent.dropout <- number.of.dropouts / number.total * 100
setwd("~/Desktop/Info201/finalProject")
library("dplyr")
library("ggplot2")
library("plotly")
source("startups.R")
degrees.data <- read.csv(file="crunchbase_2013inCSV/cb_degrees-1.csv", header=TRUE)
degrees.data <- select(degrees.data, 1, 2, 3, 4, 5, 6)
colnames(degrees.data) <- c("id", "object_id", "degree_type", "subject", "institution", "graduated_at")
degrees.data <- filter(degrees.data, degree_type == "MS" | degree_type == "BS" | degree_type == "PhD" | degree_type == "MBA")
summary <- group_by(degrees.data, degree_type) %>%
summarise(Number = n())
p <- ggplot(data = degrees.data) +
geom_bar(mapping = aes(x = `degree_type`))
data.dropout <- filter(degrees.data, graduated_at == "NULL") %>%
summarise(Number = n())
number.of.dropouts <- data.dropout[1,1]
data.total <- summarise(degrees.data, Number = n())
number.total <- data.total[1,1]
percent.dropout <- number.of.dropouts / number.total * 100
